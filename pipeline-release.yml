# Example template to deploy function-app release pipeline
parameters:
  - name: SubscriptionName
    type: string
  - name: EnvironmentName
    type: string
    default: "dev"
  - name: DeployInfra
    type: boolean
    default: true
  - name: TeamName
    type: string
  - name: ProjectName
    type: string
  - name: Location
    type: string
    default: westeurope
  - name: EnvironmentResourceType
    type: string
    default: ""
  - name: EnvironmentTags
    type: string
    default: ""
  - name: GatewayCertificate
    type: string
  - name: AzDocsBranchName
    type: string

jobs:
  - deployment:
    displayName: "${{ parameters.EnvironmentName }}"
    environment:
      name: ${{ parameters.EnvironmentName }}
    variables:
      # Add variable groups for password for certificates
      - group: "Azure ${{ parameters.EnvironmentName }}"

      # Basic
      - name: Location
        value: ${{ parameters.Location }}
      - name: DeployInfra
        value: "${{ parameters.DeployInfra }}"
      - name: ResourceGroupName
        value: ${{ parameters.TeamName }}-${{ parameters.ProjectName }}-${{ parameters.EnvironmentName }}
      - name: ResourceTags
        value: "@('BillingIdentifier=$(Tag.BillingIdentifier)'; 'EnvironmentType=${{ parameters.EnvironmentName }}';  'ApplicationName=$(Tag.ApplicationName)'; 'AppTechOwner=$(Tag.AppTechOwner)'; 'ApplicationOwner=$(Tag.ApplicationOwner)'; 'ApplicationID=$(Tag.ApplicationID)'; 'BusinessUnit=$(Tag.BusinessUnit)'; 'CostType=$(Tag.CostType)'; 'Tier=$(Tag.Tier)'; 'TeamName=$(Tag.TeamName)';'ProjectName=$(ProjectName)')"

      # Vnet/Subnet
      - name: ApplicationSubnetName
        value: "app-subnet-5"
      - name: ApplicationVnetName
        value: "sp-dc-${{ parameters.EnvironmentName }}-001-vnet"
      - name: ApplicationVnetResourceGroupName
        value: "sharedservices-rg"

      # Storage
      - name: StorageAccountName
        value: "strgpr${{ parameters.EnvironmentName }}"

      # Function app
      - name: AppServicePlanName
        value: "${{ format('KPCShared-ASP-{0}-Linux-1', parameters.EnvironmentName) }}"
      - name: AppServicePlanResourceGroupName
        value: "${{ format('KPCShared-AppServicePlans-{0}-Linux', parameters.EnvironmentName) }}"
      - name: FunctionAppResourceGroupName
        value: "$(ResourceGroupName)"
      - name: FunctionAppName
        value: "${{ format('{0}-fctapp-{1}', parameters.ProjectName, parameters.EnvironmentName) }}"
      - name: FunctionAppStorageAccountName
        value: "$(StorageAccountName)"
      - name: AlwaysOn
        value: True
      - name: FUNCTIONS_EXTENSION_VERSION
        value: "~3"
      - name: ASPNETCORE_ENVIRONMENT
        value: "development"
      - name: FunctionAppNumberOfInstances
        value: "2"
      - name: FunctionAppDeploymentSlotName
        value: "staging"
      - name: GatewayVnetResourceGroupName
        value: "sharedservices-rg"
      - name: GatewayVnetName
        value: "sp-dc-${{ parameters.EnvironmentName }}-001-vnet"
      - name: GatewaySubnetName
        value: "gateway2-subnet"
      - name: GatewayWhitelistRulePriority
        value: "20"
      - name: FunctionAppAlwaysOn
        value: $True
      - name: FunctionAppRunTime
        value: "dotnet"
      - name: FunctionAppOsType
        value: "Linux"

      # Application Insights
      - name: ApplyToAllSlots
        value: $True
      - name: AppInsightsName
        value: "${{ parameters.ProjectName }}-${{ parameters.EnvironmentName }}"
      - name: AppInsightsResourceGroupName
        value: "$(ResourceGroupName)"
      - name: AppInsightsLocation
        value: "$(Location)"

      # VNET Integration
      - name: FunctionAppVnetIntegrationSubnetName
        value: "app-subnet-5"
      - name: FunctionAppVnetIntegrationVnetName
        value: "sp-dc-${{ parameters.EnvironmentName }}-001-vnet"

        #AppSettings
      - name: FunctionAppAppSettings
        value: >- 
        @(
          'PAT=$(PAT)';
          'Organization=$(Organization)';
          'CompanySpecificTerms__0=KPN';
          'CompanySpecificTerms__1=KSP';
          'CompanySpecificTerms__2=Curiosity';
          'AcceptedTerms__0=LogAnalyticsWorkspaceId';
          'AcceptedTerms__1=LogAnalyticsWorkspace';
          'AcceptedTerms__2=Workspace';
          'AcceptedTerms__3=loganalyticsworkspaceresourceid';
          'AcceptedTerms__4=loganalyticsworkspacename';
          'AcceptedTerms__5=workspaces';
          'AcceptedTerms__6=GetLogAnalyticsWorkspaceResourceIdforPipeline';
          'AcceptedTerms__7=loganalyticsworkspacekey';
          'AcceptedTerms__8=getloganalyticsworkspacekeyforpipeline';
          'AcceptedTerms__9=getloganalyticsworkspaceidforpipeline';
          'AcceptedTerms__10=getloganalyticsworkspaceresourceidforpipeline';
          'AcceptedTerms__11=loganalyticsworkspaceresourcegroupname';
          'AcceptedTerms__12=loganalyticsworkspaceretentionindays';
          'AcceptedTerms__13=loganalyticsworkspacesolutiontypes';
          )

        # Application gateway
      - name: DomainName
        ${{ if eq(parameters.EnvironmentName, 'prod') }}:
          value: prchecker.personalcloud.kpn.com
        ${{ if ne(parameters.EnvironmentName, 'prod') }}:
          value: prchecker.${{ parameters.EnvironmentName }}.personalcloud.kpn.com
      - name: GatewayName
        value: "sp-dc-${{ parameters.EnvironmentName }}-002-gtw"
      - name: GatewayType
        value: "Public"
      - name: SharedServicesKeyvaultName
        value: "sp-dc-${{ parameters.EnvironmentName }}-shared-01-kv"
      - name: BackendDomainName
        value: $(FunctionAppName).azurewebsites.net
      - name: HealthProbePath
        value: "/api/HealthCheck"
      - name: GatewayRuleType
        value: "Basic"
      - name: HealthProbeInterval
        value: "60"
      - name: HealthProbeThreshold
        value: "2"
      - name: HealthProbeTimeout
        value: "20"
      - name: HealthProbeProtocol
        value: "HTTPS"
      - name: HttpsSettingsProtocol
        value: "HTTPS"
      - name: HttpsSettingsPort
        value: "443"
      - name: HttpsSettingsCookieAffinity
        value: "Disabled"
      - name: HttpsSettingsConnectionDrainingTimeout
        value: "0"
      - name: HttpsSettingsTimeout
        value: "30"
      - name: MatchStatusCodes
        value: "200-399"
      - name: SharedServicesResourceGroupName
        value: "sharedservices-rg"

      # Log Analytics Workspace
      - name: LogAnalyticsWorkspaceResourceGroupName
        value: "kpcshared-monitoring-${{ parameters.EnvironmentName }}"
      - name: LogAnalyticsWorkspaceName
        value: "kpcshared-law-${{ parameters.EnvironmentName }}"

      # Application Gateway WAF custom rule
      - name: ApplicationGatewayWafName
        value: "sp-dc-${{ parameters.EnvironmentName }}-002-waf"
      - name: ApplicationGatewayWafCustomRuleAction
        value: "Allow"
      - name: ApplicationGatewayWafCustomRuleRequestHeader
        value: "prchecker"
      - name: ApplicationGatewayWafCustomRuleRequestHeaderValue
        value: "thisistheprchecker2021"

    strategy:
      runOnce:
        deploy:
          steps:
            # Download the artifact
            - task: DownloadPipelineArtifact@2
              inputs:
                buildType: specific
                project: "36c74ac1-de12-4114-aa8a-995c9bea22ac"
                definition: "853"
                buildVersionToDownload: latestFromBranch
                branchName: refs/heads/${{ parameters.AzDocsBranchName }}
                artifactName: azdocs-src
                targetPath: $(Pipeline.Workspace)/AzDocs
            # Call the different tasks you need to be able to deploy your resources
            - task: AzureCLI@2
              displayName: "Get Log Analytics Workspace Id"
              name: "GetLogAnalyticsWorkspaceId"
              condition: and(succeeded(), eq(variables['DeployInfra'], 'true'))
              inputs:
                azureSubscription: "${{ parameters.SubscriptionName }}"
                scriptType: pscore
                scriptPath: "$(Pipeline.Workspace)/AzDocs/Log-Analytics-Workspace/Get-Log-Analytics-Workspace-ResourceId-for-Pipeline.ps1"
                arguments: "-LogAnalyticsWorkspaceResourceGroupName '$(LogAnalyticsWorkspaceResourceGroupName)' -LogAnalyticsWorkspaceName '$(LogAnalyticsWorkspaceName)' -OutputPipelineVariableName 'LogAnalyticsWorkspaceResourceId'"
            - task: AzureCLI@2
              displayName: "Create ResourceGroup"
              condition: and(succeeded(), eq(variables['DeployInfra'], 'true'))
              inputs:
                azureSubscription: "${{ parameters.SubscriptionName }}"
                scriptType: pscore
                scriptPath: "$(Pipeline.Workspace)/AzDocs/Resourcegroup/Create-ResourceGroup.ps1"
                arguments: "-ResourceGroupLocation '$(Location)' -ResourceGroupName '$(ResourceGroupName)' -ResourceTags $(ResourceTags)"
            - task: AzureCLI@2
              displayName: "Create Storage account"
              condition: and(succeeded(), eq(variables['DeployInfra'], 'true'))
              inputs:
                azureSubscription: "${{ parameters.SubscriptionName }}"
                scriptType: pscore
                scriptPath: "$(Pipeline.Workspace)/AzDocs/Storage-Accounts/Create-Storage-account.ps1"
                arguments: "-StorageAccountResourceGroupName '$(ResourceGroupName)' -ResourceTags $(ResourceTags) -StorageAccountName '$(StorageAccountName)' -ApplicationVnetResourceGroupName '$(ApplicationVnetResourceGroupName)' -ApplicationVnetName '$(ApplicationVnetName)' -ApplicationSubnetName '$(ApplicationSubnetName)' -LogAnalyticsWorkspaceResourceId '$(GetLogAnalyticsWorkspaceId.LogAnalyticsWorkspaceResourceId)'"
            - task: AzureCLI@2
              displayName: "Create Function App"
              condition: and(succeeded(), eq(variables['DeployInfra'], 'true'))
              inputs:
                azureSubscription: "${{ parameters.SubscriptionName }}"
                scriptType: pscore
                scriptPath: "$(Pipeline.Workspace)/AzDocs/Functions/Create-Function-App.ps1"
                arguments: "-AppServicePlanName '$(AppServicePlanName)' -AppServicePlanResourceGroupName '$(AppServicePlanResourceGroupName)' -FunctionAppResourceGroupName '$(FunctionAppResourceGroupName)' -FunctionAppName '$(FunctionAppName)' -FunctionAppStorageAccountName '$(FunctionAppStorageAccountName)' -LogAnalyticsWorkspaceName '$(GetLogAnalyticsWorkspaceId.LogAnalyticsWorkspaceResourceId)' -FunctionAppAlwaysOn $(FunctionAppAlwaysOn) -FUNCTIONS_EXTENSION_VERSION '$(FUNCTIONS_EXTENSION_VERSION)' -ASPNETCORE_ENVIRONMENT '$(ASPNETCORE_ENVIRONMENT)' -FunctionAppNumberOfInstances '$(FunctionAppNumberOfInstances)' -FunctionAppRuntime '$(FunctionAppRuntime)' -ResourceTags $(ResourceTags) -GatewayVnetResourceGroupName '$(GatewayVnetResourceGroupName)' -GatewayVnetName '$(GatewayVnetName)' -GatewaySubnetName '$(GatewaySubnetName)' -GatewayWhitelistRulePriority '$(GatewayWhitelistRulePriority)' -EnableFunctionAppDeploymentSlot -FunctionAppOsType '$(FunctionAppOsType)'"
            - task: AzureCLI@2
              displayName: "Create AppInsights Resource"
              condition: and(succeeded(), eq(variables['DeployInfra'], 'true'))
              inputs:
                azureSubscription: "${{ parameters.SubscriptionName }}"
                scriptType: pscore
                scriptPath: "$(Pipeline.Workspace)/AzDocs/AppInsights/Create-AppInsights-Resource.ps1"
                arguments: "-AppInsightsName '$(AppInsightsName)' -AppInsightsResourceGroupName '$(AppInsightsResourceGroupName)' -AppInsightsLocation '$(AppInsightsLocation)' -LogAnalyticsWorkspaceResourceId '$(GetLogAnalyticsWorkspaceId.LogAnalyticsWorkspaceResourceId)'"
            - task: AzureCLI@2
              displayName: "Create Application Insights Extension for FunctionApps codeless"
              condition: and(succeeded(), eq(variables['DeployInfra'], 'true'))
              inputs:
                azureSubscription: "${{ parameters.SubscriptionName }}"
                scriptType: pscore
                scriptPath: "$(Pipeline.Workspace)/AzDocs/AppInsights/Create-Application-Insights-Extension-for-FunctionApps-codeless.ps1"
                arguments: "-AppInsightsName '$(AppInsightsName)' -AppInsightsResourceGroupName '$(AppInsightsResourceGroupName)' -FunctionAppName '$(FunctionAppName)' -FunctionAppResourceGroupName '$(FunctionAppResourceGroupName)'"
            - task: AzureCLI@2
              displayName: "Add VNET Integration to FunctionApp"
              condition: and(succeeded(), eq(variables['DeployInfra'], 'true'))
              inputs:
                azureSubscription: "${{ parameters.SubscriptionName }}"
                scriptType: pscore
                scriptPath: "$(Pipeline.Workspace)/AzDocs/Functions/Add-VNet-integration-to-Function-App.ps1"
                arguments: '-FunctionAppResourceGroupName "$(FunctionAppResourceGroupName)" -FunctionAppName "$(FunctionAppName)" -VnetName "$(FunctionAppVnetIntegrationVnetName)" -FunctionAppVnetIntegrationSubnetName "$(FunctionAppVnetIntegrationSubnetName)"'
            - task: AzureCLI@2
              displayName: "Set AppSettings For Function App"
              condition: and(succeeded(), eq(variables['DeployInfra'], 'true'))
              inputs:
                azureSubscription: "${{ parameters.SubscriptionName }}"
                scriptType: pscore
                scriptPath: "$(Pipeline.Workspace)/AzDocs/Functions/Set-AppSettings-For-Function-App.ps1"
                arguments: "-FunctionAppResourceGroupName '$(FunctionAppResourceGroupName)' -FunctionAppName '$(FunctionAppName)' -FunctionAppAppSettings $(FunctionAppAppSettings) -ApplyToAllSlots $(ApplyToAllSlots)"
            - task: AzureCLI@2
              displayName: "Add Network Whitelist to Function App"
              condition: and(succeeded(), eq(variables['DeployInfra'], 'true'))
              inputs:
                azureSubscription: "${{ parameters.SubscriptionName }}"
                scriptType: pscore
                scriptPath: "$(Pipeline.Workspace)/AzDocs/Functions/Add-Network-Whitelist-to-Function-App.ps1"
                arguments: "-FunctionAppResourceGroupName '$(FunctionAppResourceGroupName)' -FunctionAppName '$(FunctionAppName)' -ApplyToAllSlots $(ApplyToAllSlots)"
            - task: DownloadBuildArtifacts@0
              inputs:
                buildType: "current"
                downloadType: "single"
                artifactName: "functionapp_zip"
                downloadPath: "$(System.ArtifactsDirectory)"
            - task: AzureFunctionApp@1
              inputs:
                azureSubscription: "${{ parameters.SubscriptionName }}"
                appType: "functionAppLinux"
                appName: "$(FunctionAppName)"
                deployToSlotOrASE: true
                resourceGroupName: "$(FunctionAppResourceGroupName)"
                slotName: "$(FunctionAppDeploymentSlotName)"
                package: "$(System.ArtifactsDirectory)/functionapp_zip/functionapp.zip"
                runtimeStack: "DOTNET|3.1"
            - task: AzureAppServiceManage@0
              inputs:
                azureSubscription: "${{ parameters.SubscriptionName }}"
                Action: "Swap Slots"
                WebAppName: "$(FunctionAppName)"
                ResourceGroupName: "$(FunctionAppResourceGroupName)"
                SourceSlot: "$(FunctionAppDeploymentSlotName)"
                PreserveVnet: true
            - task: AzureCLI@2
              displayName: "Remove Network Whitelist from Function App"
              condition: always()
              inputs:
                azureSubscription: "${{ parameters.SubscriptionName }}"
                scriptType: pscore
                scriptPath: "$(Pipeline.Workspace)/AzDocs/Functions/Remove-Network-Whitelist-from-Function-App.ps1"
                arguments: "-FunctionAppResourceGroupName '$(FunctionAppResourceGroupName)' -FunctionAppName '$(FunctionAppName)' -ApplyToAllSlots $(ApplyToAllSlots)"
            - task: DownloadSecureFile@1
              name: wildcardpersonalcloud
              displayName: "Download wildcard certificate from secure files"
              inputs:
                secureFile: ${{ parameters.GatewayCertificate }}
                retryCount: "5"
            - task: AzureCLI@2
              displayName: "Create ApplicationGateway Entrypoint for DomainName"
              inputs:
                azureSubscription: "${{ parameters.SubscriptionName }}"
                scriptType: pscore
                scriptPath: "$(Pipeline.Workspace)/AzDocs/Application-Gateway/Create-Application-Gateway-Entrypoint-for-DomainName.ps1"
                arguments: '-CertificatePath "$(wildcardpersonalcloud.secureFilePath)" -DomainName "$(DomainName)" -Gatewayname "$(GatewayName)" -gatewayType "$(GatewayType)" -sharedServicesKeyvaultName "$(SharedServicesKeyvaultName)" -CertificatePassword "$(WildcardPersonalcloudKpnComCertificatePassword)" -backendDomainName "$(BackendDomainName)" -healthProbePath "$(HealthProbePath)" -gatewayruletype "$(GatewayRuleType)" -healthProbeInterval "$(HealthProbeInterval)" -healthProbeThreshold "$(HealthProbeThreshold)" -healthProbeTimeout "$(HealthProbeTimeout)" -healthProbeProtocol "$(HealthProbeProtocol)" -httpsSettingsProtocol "$(HttpsSettingsProtocol)" -httpsSettingsPort "$(HttpsSettingsPort)" -httpsSettingsCookieAffinity "$(HttpsSettingsCookieAffinity)" -httpsSettingsConnectionDrainingTimeout "$(HttpsSettingsConnectionDrainingTimeout)" -httpsSettingsTimeout "$(HttpsSettingsTimeout)" -matchStatusCodes "$(MatchStatusCodes)" -ApplicationGatewayResourceGroupName "$(SharedServicesResourceGroupName)" -CertificateKeyvaultResourceGroupName "$(SharedServicesResourceGroupName)"'
            - task: AzurePowerShell@5
              inputs:
                azureSubscription: "${{ parameters.SubscriptionName }}"
                ScriptType: "FilePath"
                scriptPath: "$(Pipeline.Workspace)/AzDocs/Application-Gateway/Set-ApplicationGatewayFirewallWhitelistRule.ps1"
                azurePowerShellVersion: "LatestVersion"
                pwsh: true
                ScriptArguments: "-IngressDomainName '$(DomainName)' -ApplicationGatewayResourceGroupName '$(SharedServicesResourceGroupName)' -ApplicationGatewayWafName '$(ApplicationGatewayWafName)' -ApplicationGatewayWafCustomRuleAction '$(ApplicationGatewayWafCustomRuleAction)' -ApplicationGatewayWafCustomRuleRequestHeader '$(ApplicationGatewayWafCustomRuleRequestHeader)' -ApplicationGatewayWafCustomRuleRequestHeaderValue '$(ApplicationGatewayWafCustomRuleRequestHeaderValue)'"
