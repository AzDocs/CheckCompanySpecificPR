# Example template to deploy function-app release pipeline
parameters:
  - name: SubscriptionName
    type: string
  - name: EnvironmentName
    type: string
    default: "dev"
  - name: DeployInfra
    type: boolean
    default: true
  - name: TeamName
    type: string
  - name: ProjectName
    type: string
  - name: Location
    type: string
    default: westeurope
  - name: EnvironmentResourceType
    type: string
    default: ""
  - name: EnvironmentTags
    type: string
    default: ""
  - name: GatewayCertificate
    type: string
  - name: AzDocsBranchName
    type: string

jobs:
  - deployment:
    displayName: "${{ parameters.EnvironmentName }}"
    environment:
      name: ${{ parameters.EnvironmentName }}
    variables:
      # Add variable groups for password for certificates
      - group: "Azure ${{ parameters.EnvironmentName }}"

      # Basic
      - name: Location
        value: ${{ parameters.Location }}
      - name: DeployInfra
        value: "${{ parameters.DeployInfra }}"
      - name: ResourceGroupName
        value: ${{ parameters.TeamName }}-${{ parameters.ProjectName }}-${{ parameters.EnvironmentName }}
      - name: ResourceTags
        value: "@('BillingIdentifier=$(Tag.BillingIdentifier)'; 'EnvironmentType=${{ parameters.EnvironmentName }}';  'ApplicationName=$(Tag.ApplicationName)'; 'AppTechOwner=$(Tag.AppTechOwner)'; 'ApplicationOwner=$(Tag.ApplicationOwner)'; 'ApplicationID=$(Tag.ApplicationID)'; 'BusinessUnit=$(Tag.BusinessUnit)'; 'CostType=$(Tag.CostType)'; 'Tier=$(Tag.Tier)')"

      # Storage
      - name: StorageAccountName
        value: "<your-storage-account-name>"

      # Function app
      - name: AppServicePlanName
        value: "<your-app-service-plan>"
      - name: AppServicePlanResourceGroupName
        value: "<your-app-service-plan-resource-group-name>"
      - name: FunctionAppResourceGroupName
        value: "$(ResourceGroupName)"
      - name: FunctionAppName
        value: "${{ format('{0}-fctapp', parameters.ProjectName) }}"
      - name: FunctionAppStorageAccountName
        value: "$(StorageAccountName)"
      - name: AlwaysOn
        value: True
      - name: FUNCTIONS_EXTENSION_VERSION
        value: "~3"
      - name: ASPNETCORE_ENVIRONMENT
        value: "development"
      - name: FunctionAppNumberOfInstances
        value: "2"
      - name: FunctionAppDeploymentSlotName
        value: "staging"
      - name: FunctionAppAlwaysOn
        value: $True
      - name: FunctionAppRunTime
        value: "dotnet"
      - name: FunctionAppOsType
        value: "Linux"

      # Application Insights
      - name: ApplyToAllSlots
        value: $True
      - name: AppInsightsName
        value: "${{ parameters.ProjectName }}-${{ parameters.EnvironmentName }}"
      - name: AppInsightsResourceGroupName
        value: "$(ResourceGroupName)"
      - name: AppInsightsLocation
        value: "$(Location)"

        #AppSettings
      - name: FunctionAppAppSettings
        value: "@('PAT=$(PAT)';'Organization=$(Organization)';'CompanySpecificTerms__0=ThisIsMyCompany';'CompanySpecificTerms__1=CompanyNameTest';'AcceptedTerms__0=Project';)"

      # Log Analytics Workspace
      - name: LogAnalyticsWorkspaceResourceGroupName
        value: "<your-log-analytics-workspace-resource-group-name>"
      - name: LogAnalyticsWorkspaceName
        value: "<your-log-analytics-workspace-name>"

    strategy:
      runOnce:
        deploy:
          steps:
            # Download the artifact
            - task: DownloadPipelineArtifact@2
              inputs:
                buildType: specific
                project: "<project-id>"
                definition: "<definition>"
                buildVersionToDownload: latestFromBranch
                branchName: refs/heads/${{ parameters.AzDocsBranchName }}
                artifactName: <artifact-name>
                targetPath: $(Pipeline.Workspace)/AzDocs
            # Call the different tasks you need to be able to deploy your resources
            - task: AzureCLI@2
              displayName: "Get Log Analytics Workspace Id"
              name: "GetLogAnalyticsWorkspaceId"
              condition: and(succeeded(), eq(variables['DeployInfra'], 'true'))
              inputs:
                azureSubscription: "${{ parameters.SubscriptionName }}"
                scriptType: pscore
                scriptPath: "$(Pipeline.Workspace)/AzDocs/Log-Analytics-Workspace/Get-Log-Analytics-Workspace-ResourceId-for-Pipeline.ps1"
                arguments: "-LogAnalyticsWorkspaceResourceGroupName '$(LogAnalyticsWorkspaceResourceGroupName)' -LogAnalyticsWorkspaceName '$(LogAnalyticsWorkspaceName)' -OutputPipelineVariableName 'LogAnalyticsWorkspaceResourceId'"
            - task: AzureCLI@2
              displayName: "Create ResourceGroup"
              condition: and(succeeded(), eq(variables['DeployInfra'], 'true'))
              inputs:
                azureSubscription: "${{ parameters.SubscriptionName }}"
                scriptType: pscore
                scriptPath: "$(Pipeline.Workspace)/AzDocs/Resourcegroup/Create-ResourceGroup.ps1"
                arguments: "-ResourceGroupLocation '$(Location)' -ResourceGroupName '$(ResourceGroupName)' -ResourceTags $(ResourceTags)"
            - task: AzureCLI@2
              displayName: "Create Storage account"
              condition: and(succeeded(), eq(variables['DeployInfra'], 'true'))
              inputs:
                azureSubscription: "${{ parameters.SubscriptionName }}"
                scriptType: pscore
                scriptPath: "$(Pipeline.Workspace)/AzDocs/Storage-Accounts/Create-Storage-account.ps1"
                arguments: "-StorageAccountResourceGroupName '$(ResourceGroupName)' -ResourceTags $(ResourceTags) -StorageAccountName '$(StorageAccountName)' -LogAnalyticsWorkspaceResourceId '$(GetLogAnalyticsWorkspaceId.LogAnalyticsWorkspaceResourceId)' -ForcePublic"
            - task: AzureCLI@2
              displayName: "Create Function App"
              condition: and(succeeded(), eq(variables['DeployInfra'], 'true'))
              inputs:
                azureSubscription: "${{ parameters.SubscriptionName }}"
                scriptType: pscore
                scriptPath: "$(Pipeline.Workspace)/AzDocs/Functions/Create-Function-App.ps1"
                arguments: "-AppServicePlanName '$(AppServicePlanName)' -AppServicePlanResourceGroupName '$(AppServicePlanResourceGroupName)' -FunctionAppResourceGroupName '$(FunctionAppResourceGroupName)' -FunctionAppName '$(FunctionAppName)' -FunctionAppStorageAccountName '$(FunctionAppStorageAccountName)' -LogAnalyticsWorkspaceName '$(GetLogAnalyticsWorkspaceId.LogAnalyticsWorkspaceResourceId)' -FunctionAppAlwaysOn $(FunctionAppAlwaysOn) -FUNCTIONS_EXTENSION_VERSION '$(FUNCTIONS_EXTENSION_VERSION)' -ASPNETCORE_ENVIRONMENT '$(ASPNETCORE_ENVIRONMENT)' -FunctionAppNumberOfInstances '$(FunctionAppNumberOfInstances)' -FunctionAppRuntime '$(FunctionAppRuntime)' -ResourceTags $(ResourceTags) -EnableFunctionAppDeploymentSlot -FunctionAppOsType '$(FunctionAppOsType)' -ForcePublic"
            - task: AzureCLI@2
              displayName: "Create AppInsights Resource"
              condition: and(succeeded(), eq(variables['DeployInfra'], 'true'))
              inputs:
                azureSubscription: "${{ parameters.SubscriptionName }}"
                scriptType: pscore
                scriptPath: "$(Pipeline.Workspace)/AzDocs/AppInsights/Create-AppInsights-Resource.ps1"
                arguments: "-AppInsightsName '$(AppInsightsName)' -AppInsightsResourceGroupName '$(AppInsightsResourceGroupName)' -AppInsightsLocation '$(AppInsightsLocation)' -LogAnalyticsWorkspaceResourceId '$(GetLogAnalyticsWorkspaceId.LogAnalyticsWorkspaceResourceId)'"
            - task: AzureCLI@2
              displayName: "Create Application Insights Extension for FunctionApps codeless"
              condition: and(succeeded(), eq(variables['DeployInfra'], 'true'))
              inputs:
                azureSubscription: "${{ parameters.SubscriptionName }}"
                scriptType: pscore
                scriptPath: "$(Pipeline.Workspace)/AzDocs/AppInsights/Create-Application-Insights-Extension-for-FunctionApps-codeless.ps1"
                arguments: "-AppInsightsName '$(AppInsightsName)' -AppInsightsResourceGroupName '$(AppInsightsResourceGroupName)' -FunctionAppName '$(FunctionAppName)' -FunctionAppResourceGroupName '$(FunctionAppResourceGroupName)'"
            - task: AzureCLI@2
              displayName: "Set AppSettings For Function App"
              condition: and(succeeded(), eq(variables['DeployInfra'], 'true'))
              inputs:
                azureSubscription: "${{ parameters.SubscriptionName }}"
                scriptType: pscore
                scriptPath: "$(Pipeline.Workspace)/AzDocs/Functions/Set-AppSettings-For-Function-App.ps1"
                arguments: "-FunctionAppResourceGroupName '$(FunctionAppResourceGroupName)' -FunctionAppName '$(FunctionAppName)' -FunctionAppAppSettings $(FunctionAppAppSettings) -ApplyToAllSlots $(ApplyToAllSlots)"
            - task: AzureCLI@2
              displayName: "Add Network Whitelist to Function App"
              condition: and(succeeded(), eq(variables['DeployInfra'], 'true'))
              inputs:
                azureSubscription: "${{ parameters.SubscriptionName }}"
                scriptType: pscore
                scriptPath: "$(Pipeline.Workspace)/AzDocs/Functions/Add-Network-Whitelist-to-Function-App.ps1"
                arguments: "-FunctionAppResourceGroupName '$(FunctionAppResourceGroupName)' -FunctionAppName '$(FunctionAppName)' -ApplyToAllSlots $(ApplyToAllSlots)"
            - task: DownloadBuildArtifacts@0
              inputs:
                buildType: "current"
                downloadType: "single"
                artifactName: "functionapp_zip"
                downloadPath: "$(System.ArtifactsDirectory)"
            - task: AzureFunctionApp@1
              inputs:
                azureSubscription: "${{ parameters.SubscriptionName }}"
                appType: "functionAppLinux"
                appName: "$(FunctionAppName)"
                deployToSlotOrASE: true
                resourceGroupName: "$(FunctionAppResourceGroupName)"
                slotName: "$(FunctionAppDeploymentSlotName)"
                package: "$(System.ArtifactsDirectory)/functionapp_zip/functionapp.zip"
                runtimeStack: "DOTNET|3.1"
            - task: AzureAppServiceManage@0
              inputs:
                azureSubscription: "${{ parameters.SubscriptionName }}"
                Action: "Swap Slots"
                WebAppName: "$(FunctionAppName)"
                ResourceGroupName: "$(FunctionAppResourceGroupName)"
                SourceSlot: "$(FunctionAppDeploymentSlotName)"
                PreserveVnet: true
            - task: AzureCLI@2
              displayName: "Remove Network Whitelist from Function App"
              condition: always()
              inputs:
                azureSubscription: "${{ parameters.SubscriptionName }}"
                scriptType: pscore
                scriptPath: "$(Pipeline.Workspace)/AzDocs/Functions/Remove-Network-Whitelist-from-Function-App.ps1"
                arguments: "-FunctionAppResourceGroupName '$(FunctionAppResourceGroupName)' -FunctionAppName '$(FunctionAppName)' -ApplyToAllSlots $(ApplyToAllSlots)"
